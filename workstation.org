#+TITLE: Worksation
* Background & Introdution
This is my workstation configuration. I have had a few different setups over the years, so this one is still a bit of a
work in progress. Honestly, accomplishing this is a lot harder than I expected.

This time around, I have decided to try [[https://nixos.org/][nix]]. Nix is a really interesting way to configure your machine. However, this is not a
guide to nix itself, so I should link to a better one. Primariy, nix gives me faith that my setup will be rebuildable under
a new set of conditions, and can itself be a firm foundation upon which to build additional tooling for myself.

I have no idea if anyone will ever read this, but from personal experience, these workstation projects are easy to put
aside for a long time, and then you come back and can't remember how things were built.

That brings me to another point: this project is mostly written with literate org mode. This gives me an easy way to document
my thoughts as I work, and also explore using org mode for this task. I did this same thing a long time ago with my old
dotfiles setup, and I liked it, but everything else about it was a massive pain, so it was eventually abandoned. If you want
to see how this works, you should view this file raw. When github renders org mode source blocks, it omits all the headers.

Anyway, if you have any questions, feel free to shoot me an email or open an issue.
* README
Every code project needs a readme. This really just contains super simple instructions along with a link to this file, which
contains all the imporant information.

#+begin_src md :tangle ./README.md  :noweb yes
WARNING: this file is managed by tangling the file worksation.org. Do not edit directly!

# Instructions

1. clone this repo into `~/workstation` (does it have to be that location?)
2. cd `~/workstation` and run the `link.sh` script
3. run the `set-machine.sh` with the name of this machine (which links this machine settings).
3. run `install.sh`

# More Information

For more information, you should really read the <a href="workstation.org">workstation.org</a> file.
#+end_src
* Bootstrap process
Before I can start using nix, a number of things need to happen. This is called the boostrap process.

1. ~nix~ needs to be installed.
2. ~home-manager~ needs to be installed.
3. ~home-manager~ file ~home.nix~ needs to be linked to correct location.
4. ~set-machine.sh~ must be run to set the symlink to the current machine. This provides machine-specific
   settings. I *might* be able to do this better somehow though.

** Nix installation
It appears that this line will set up nix on both on laptop and GH action runner just fine.
I worry that it might not work correctly for linux systems though, so I have a TODO to revisit this.

#+NAME: setup-nix
#+BEGIN_SRC sh
  # https://nixos.org/nix/manual/#sect-macos-installation
  sh <(curl -L https://nixos.org/nix/install) --darwin-use-unencrypted-nix-store-volume
  source $HOME/.nix-profile/etc/profile.d/nix.sh
#+END_SRC

This used to be problematic to set this up in catalina because of OS X readonly root directory nonsense.
Nowadays the installer handles this though, but I have had it fail before, so be aware.
(I *think* the cause of the failure was that I had old nix stuff still around from an earlier rebuild, and
running the commands to delete the volumes, remove the mounts, etc, seemed to work)
** Home Manager Installation
Before we can run home manager via nix, we need to actually install it.

#+NAME: setup-home-manager
#+begin_src sh

# add channels for home manager
nix-channel --add https://github.com/rycee/home-manager/archive/master.tar.gz home-manager
nix-channel --update

# if any files that home manager replaces already exist, the install process will fail
# using environment variable here will get install to behave just like the switch command flag -b
export HOME_MANAGER_BACKUP_EXT=old
nix-shell '<home-manager>' -A install || {
  echo "first home manager install failed, but that is expected."
}

home-manager switch -b old
#+end_src

I think I may have resolved the reason this was "expectedly" failing, but anyway it shouldn't hurt anything to have the extra echo
and switches in there.
** NIV Installation
Install Niv. I kinda think this is unnecessary, but I need to see research and see if this is so.
#+NAME: setup-niv
#+BEGIN_SRC sh
nix-env -iA nixpkgs.niv
#+END_SRC
** install.sh
This script runs all of the mentioned code, in order.

#+BEGIN_SRC sh :tangle ./install.sh :shebang "#!/usr/bin/env bash" :noweb yes

# WARNING: This file is managed by tangling worksation.org. Do not edit directly!

set -xeuo pipefail
# Set up nix
<<setup-nix>>

# Set up home manager
<<setup-home-manager>>

# Set up Niv
<<setup-niv>>

#+END_SRC
** link.sh
Set up symlinks. This should be done as part of the initial setup process.

The program ~home-manager~ expects the file ~home.nix~ to be in
~$HOME/.config/nixpkgs/home.nix~. This script establishes the file in that location.

#+BEGIN_SRC sh :tangle ./link.sh :shebang "#!/usr/bin/env bash" :noweb yes
# WARNING: This file is managed by tangling worksation.org. Do not edit directly!
set -xeuo pipefail

# set up symlinks
mkdir -p $HOME/.config/nixpkgs/
ln -s `pwd`/home.nix $HOME/.config/nixpkgs/home.nix
#+END_SRC
#!/usr/bin/env bash
** set-machine.sh
This script links a specific machine configuration to the file ~this-machine.nix~ so that
I can have per-machine-speciic settings, specifically usernames, home directory paths, etc.

This script is bad and I really should clean it up, but it works ok for now.
#+BEGIN_SRC sh :tangle ./set-machine.sh :shebang "#!/usr/bin/env bash" :noweb yes
# WARNING: This file is managed by tangling worksation.org. Do not edit directly!
set -euo pipefail

if [[ "$@" == "" ]] ; then
    echo "you must provide a machine name"
else
    if [[ "$1" == "glamdring" ]] ; then
      ln -s glamdring.nix this-machine.nix
    else

      if [[ "$1" == "gh-runner" ]] ; then
        ln -s gh-runner.nix this-machine.nix
      else
        echo "machine name unrecognized!"
        exit 1
      fi
    fi
fi
#+END_SRC
* home.nix
The "main" file for homemanager. At this point, nix, home manager, etc have all been
set up.

** Loading nixpkgs from Niv
#+NAME: load-niv
#+BEGIN_SRC nix
  # Load specific nixpkgs reference via niv
  nixpkgs = (import ./nix/sources.nix).nixpkgs;
  pkgs = import nixpkgs {};
  ctx2 = ctx // {pkgs = pkgs;};
#+END_SRC

If you are unfamiliar, niv gives you the ability to "lock" the set of packages that you
install from. This way, the next time you check out the repository, it will have the same
references as at the time it was committed.

The variable ~ctx2~ is "context", but with niv's pkgs instead. That way when I pass it to
other nix files, they will use it, too. (perhaps they should load and use niv directly though?
I need to think about that). The name "context" to me means
"whatever gets passed to the funciton in home.nix". I really have no idea what to call it.
** The full home.nix file
#+begin_src nix :tangle ./home.nix :noweb yes
# WARNING: This file is managed by tangling worksation.org. Do not edit directly!
ctx:
let
  <<load-niv>>
  this-machine = import ./this-machine.nix;
  dotfiles = (import ./dotfiles.nix) ctx2;
  emacs = (import ./emacs.nix) ctx2;
in
{
 
  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;

  # Home Manager needs a bit of information about you and the
  # paths it should manage.
  home.username = this-machine.username;
  home.homeDirectory = this-machine.homeDirectory;

  home.file = dotfiles // emacs.files;

  home.packages = [
    pkgs.cmake
    pkgs.libtool
    pkgs.ripgrep
    pkgs.fd
    pkgs.fontconfig
    pkgs.coreutils
    pkgs.ghcid
    pkgs.jq
    pkgs.jl
    emacs.doom-emacs
    pkgs.bitwarden-cli
  ];

  # This value determines the Home Manager release that your
  # configuration is compatible with. This helps avoid breakage
  # when a new Home Manager release introduces backwards
  # incompatible changes.
  #
  # You can update Home Manager without changing this value. See
  # the Home Manager release notes for a list of state version
  # changes in each release.
  home.stateVersion = "20.09";
}
#+end_src
* Testing
** test.sh
At this point in time, this test actually checks very little, but what it DOES check
is things that indicate that everying went right. Specifically, checking the doom version means
emacs, doom, and the whole doom setup process worked out.

I plan to move this to a haskell project at some point, probably do it with hspec instead.
Or maybe that bats testing library. We'll see.
#+begin_src sh :tangle ./test/test.sh :shebang "#!/usr/bin/env bash" :noweb yes
# WARNING: This file is managed by tangling worksation.org. Do not edit directly!
#!/usr/bin/env bash
set -euox pipefail

# ensure all the references are set
source $HOME/.nix-profile/etc/profile.d/nix.sh

echo "RUNNING TESTS"

# emacs
if which emacs; then
    echo found emacs
    if which emacs | grep nix > /dev/null; then
        echo emacs installed by nix

        EMACS_VERSION=$(emacs -Q --batch --eval '(princ emacs-version)')
        if  [[ "$EMACS_VERSION" == "26.3" ]]; then
            echo emacs is correct version

            DOOM_VERSION=$(emacs --batch -l ~/.emacs.d/init.el --eval '(princ doom-version)')
            if  [[ "$DOOM_VERSION" == "2.0.9" ]]; then
                echo doom is correct version
            else
                echo doom is not reported to be correct version, found "$DOOM_VERSION"
                exit 1
            fi
        else
            echo emacs is not correct version, found $EMACS_VERSION
            exit 1
        fi
    else
        echo PROBLEM: emacs installed, but not installed by nix
        exit 1
    fi
else
  echo EMACS NOT FOUND
  exit 1
fi
#+end_src
** Github Actions CI
First, the CI config:

#+begin_src yaml :tangle ./.github/workflows/test.yml :noweb yes
# WARNING: This file is managed by tangling worksation.org. Do not edit directly!

name: CI

on: [push]

jobs:
  build:
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2

    - name: Run a one-line script
      run: ./test/ci.sh
#+end_src

To run CI, we have a script which, thankfully, basically mirrors the install instructions.

#+begin_src sh :tangle ./test/ci.sh :shebang "#!/usr/bin/env bash" :noweb yes

# WARNING: This file is managed by tangling worksation.org. Do not edit directly!

set -xeuo pipefail

bash link.sh

bash set-machine.sh gh-runner

bash install.sh

echo INSTALL PROCESS COMPLETE, TESTING

bash test/test.sh
#+end_src
* Future
** Tasks
*** STRT org babel tangleify everything
*** TODO add links for anyone interested
**** nix
**** home manager
**** org mode
**** literate org
*** TODO add a non-mac system on github (using built matrix?) to test if it works
*** TODO consider not installing master home-manager, instead installing specific revision
*** TODO setup/test/evaluate bitwarden
create account *just* for CI server, authenticate against that
checkers/assertions about state of bitwarden
*** TODO move over any additional dotfiles needed, and delete repo if no longer has anything worthwhile
*** TODO set up rclone
*** TODO backup everything from my personal macbook air and then rebuild machine
*** TODO see if I can delete the Niv installation step
*** TODO investigate if its possible to prevent committing manually-edited target files (maybe with checksum and git pre-commit-hook?)
*** DONE lock down versions with niv
*** DONE figure out if any of the issues w/ CI are avoidable
*** DONE try this instead https://github.com/vlaci/nix-doom-emacs
